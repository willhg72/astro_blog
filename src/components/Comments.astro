---
import { createClient } from '@supabase/supabase-js';

export interface Props {
  postId: string;
}

const { postId } = Astro.props;

let comments = [];
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

if (supabaseUrl && supabaseKey) {
  try {
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    if (postId) {
      const { data, error } = await supabase
        .from('comments')
        .select('*')
        .eq('post_id', postId)
        .order('created_at', { ascending: false });
      
      if (!error) comments = data;
    }
  } catch (error) {
    console.error('Error fetching comments:', error);
  }
} else {
  // Removing the debug message that was appearing in the console
}
---

<div class="comments-section">
  <h2>Comentarios ({comments.length})</h2>
  
  <div class="comment-form">
    <input type="email" placeholder="Tu correo electrónico" class="email-input" required />
    <textarea placeholder="Escribe tu comentario..." required></textarea>
    <button class="submit-button" data-post-id={postId}>Publicar comentario</button>
  </div>
  
  <div class="comments-list">
    {comments.length > 0 ? (
      comments.map((comment) => (
        <div class="comment-item">
          <div class="comment-header">
            <span class="comment-author">{comment.email.split('@')[0]}</span>
            <span class="comment-date">{new Date(comment.created_at).toLocaleDateString()}</span>
          </div>
          <p class="comment-content">{comment.content}</p>
          <div class="comment-actions">
            <button class="comment-action-button like-button" data-comment-id={comment.id}>
              <span class="like-count">0</span> Me gusta
            </button>
            <button class="comment-action-button reply-button" data-comment-id={comment.id}>
              Responder
            </button>
          </div>
          <div id={`replies-${comment.id}`} class="replies-container"></div>
          <div id={`reply-form-${comment.id}`} class="reply-form-container" style="display: none;">
            <form class="reply-form">
              <input type="hidden" name="parentId" value={comment.id} />
              <input type="hidden" name="postId" value={postId} />
              <input type="email" name="email" class="comment-input" placeholder="Tu correo electrónico" required />
              <textarea name="content" class="comment-textarea" placeholder="Escribe tu respuesta..." required></textarea>
              <div class="comment-button-container">
                <button type="button" class="cancel-reply-button">Cancelar</button>
                <button type="submit" class="comment-submit-button">Responder</button>
              </div>
            </form>
          </div>
        </div>
      ))
    ) : (
      <p>No hay comentarios aún. ¡Sé el primero en comentar!</p>
    )}
  </div>
</div>

<style>
  .comments-section {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid #e2e8f0;
  }
  
  .comment-form {
    margin-top: 2rem;
    margin-bottom: 2rem;
  }
  
  input, textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #e2e8f0;
    border-radius: 0.375rem;
    margin-bottom: 1rem;
    font-family: inherit;
  }
  
  textarea {
    min-height: 6rem;
    resize: vertical;
  }
  
  .submit-button {
    background-color: #1a202c;
    color: white;
    font-weight: 600;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    border: none;
    cursor: pointer;
    float: right;
    transition: background-color 0.2s;
  }
  
  .submit-button:hover {
    background-color: #2d3748;
  }

  /* Add to existing styles */
  .reply-form-container {
    margin-top: 1rem;
    margin-left: 2rem;
    padding: 1rem;
    background-color: #f8fafc;
    border-radius: 0.375rem;
  }
  
  .reply-form .comment-input,
  .reply-form .comment-textarea {
    width: 100%;
    padding: 0.75rem;
    margin-bottom: 1rem;
    border: 1px solid #e2e8f0;
    border-radius: 0.375rem;
    font-size: 1rem;
  }
  
  .reply-form .comment-input:focus,
  .reply-form .comment-textarea:focus {
    outline: none;
    border-color: #a0aec0;
    box-shadow: 0 0 0 3px rgba(160, 174, 192, 0.1);
  }
  
  .comment-button-container {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
  }
  
  .cancel-reply-button {
    background-color: #e2e8f0;
    color: #4a5568;
    font-weight: 500;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .cancel-reply-button:hover {
    background-color: #cbd5e0;
  }
  
  .comment-submit-button {
    background-color: #000;
    color: white;
    font-weight: 500;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    border: none;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .comment-submit-button:hover {
    background-color: #2d3748;
  }
  
  .like-button.active {
    color: #3182ce;
    font-weight: 500;
  }
  
  .replies-container {
    margin-left: 2rem;
    margin-top: 1rem;
  }
</style>

<script>
  // Initialize Supabase client for browser
  const supabaseClient = createClient(
    import.meta.env.PUBLIC_SUPABASE_URL,
    import.meta.env.PUBLIC_SUPABASE_ANON_KEY
  );

  document.addEventListener('DOMContentLoaded', function() {
    const submitButton = document.querySelector('.submit-button');
    
    submitButton?.addEventListener('click', async function() {
      const email = document.querySelector('.email-input').value.trim();
      const content = document.querySelector('.comments-section textarea').value.trim();
      const postId = this.dataset.postId;

      if (email && content) {
        try {
          const { error } = await supabaseClient
            .from('comments')
            .insert([{ 
              email, 
              content,
              post_id: postId,
              created_at: new Date().toISOString()
            }]);

          if (error) throw error;
          
          // Reload to show new comment
          location.reload();
          
        } catch (error) {
          console.error('Error saving comment:', error);
          alert('Error al guardar el comentario');
        }
      }
    });
  });

  // Update like handler to use Supabase
  document.querySelectorAll('.like-button').forEach(button => {
    button.addEventListener('click', async () => {
      const commentId = button.dataset.commentId;
      const email = localStorage.getItem('userEmail');

      try {
        const { data, error } = await supabaseClient
          .from('likes')
          .upsert({ 
            comment_id: commentId,
            user_email: email,
            created_at: new Date().toISOString()
          });

        if (error) throw error;
        
        // Update UI here
        const likeCount = button.querySelector('.like-count');
        likeCount.textContent = parseInt(likeCount.textContent) + 1;
        
      } catch (error) {
        console.error('Error updating like:', error);
      }
    });
  });

  // Update reply handler to use Supabase
  document.querySelectorAll('.reply-form').forEach(form => {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const parentId = formData.get('parentId');
      const postId = formData.get('postId');

      try {
        const { error } = await supabaseClient
          .from('comments')
          .insert([{
            email: formData.get('email'),
            content: formData.get('content'),
            post_id: postId,
            parent_id: parentId,
            created_at: new Date().toISOString()
          }]);

        if (error) throw error;
        
        // Reload to show new reply
        location.reload();

      } catch (error) {
        console.error('Error saving reply:', error);
        alert('Error al guardar la respuesta');
      }
    });
  });
</script>